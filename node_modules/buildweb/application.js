module.exports = require('class-js2').create({

    configFilename: 'buildweb.json',

    moduleName: '',

    actionName: '',

    constructor: function()
    {
        var me = this;

        me.parseArguments();
        me.readConfig(me.parseConfig.bind(me));
    },

    parseArguments: function()
    {
        var me = this,
            argv = require('yargs').argv;

        if (argv.help)
        {
            console.log('Usage: node %s <module> [action=all] [--help]', process.argv[1]);
            process.exit();
        }

        me.moduleName = argv._[0] || '';
        me.actionName = argv._[1] || 'all';

        if (me.moduleName.length == 0)
        {
            console.log('Missing argument: module');
            process.exit();
        }
    },

    readConfig: function(callback)
    {
        var me = this,
            fs = require('fs');

        fs.readFile(me.configFilename, 'utf8', function(error, contents) {
            if (error)
            {
                console.log('Failed to open %s', me.configFilename);
                process.exit();
            }

            callback(JSON.parse(contents));
        });
    },

    parseConfig: function(config)
    {
        var me = this;

        if (config[me.moduleName] === undefined)
        {
            console.log('Unknown module: %s.', me.moduleName);
            process.exit();
        }

        if (me.actionName == 'all')
        {
            for(var actionName in config[me.moduleName])
            {
                if (!Object.prototype.hasOwnProperty.call(config[me.moduleName], actionName))
                {
                    continue;
                }

                me.executeAction(actionName, config[me.moduleName][actionName]);
            }
        }
        else if(config[me.moduleName][me.actionName] !== undefined)
        {
            me.executeAction(me.actionName, config[me.moduleName][me.actionName]);
        }
        else
        {
            console.log('Unknown action: %s.', me.actionName);
            process.exit();
        }
    },

    executeAction: function(actionName, data)
    {
        console.log('Executing %s action...', actionName);
    }

});