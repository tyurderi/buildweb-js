module.exports = require('class-js2').create({

    configFilename: 'buildweb.json',

    moduleName: '',

    actionName: '',

    config: [],

    constructor: function()
    {
        var me = this;

        me.parseArguments();
        me.readConfig(me.useConfig.bind(me));
    },

    parseArguments: function()
    {
        var me = this,
            argv = require('yargs').argv;

        if (argv.help)
        {
            console.log('Usage: node %s <module> [action=all] [--help]', process.argv[1]);
            process.exit();
        }

        me.moduleName = argv._[0] || '';
        me.actionName = argv._[1] || 'all';

        if (me.moduleName.length == 0)
        {
            console.log('Missing argument: module');
            process.exit();
        }
    },

    readConfig: function(finished)
    {
        var me = this,
            fs = require('fs');

        fs.readFile(me.configFilename, 'utf8', function(error, contents) {
            if (error)
            {
                console.log('Failed to open %s', me.configFilename);
                process.exit();
            }

            me.config = JSON.parse(contents);
            finished();
        });
    },

    useConfig: function()
    {
        var me = this,
            module;

        if (!(module = me.config.modules[me.moduleName]))
        {
            console.log('Unknown module: %s.', me.moduleName);
            process.exit();
        }

        var syncActions  = me._getActions(module.actions, true),
            asyncActions = me._getActions(module.actions, false);

        console.log('executing asynchronous actions...');
        asyncActions.forEach(function(action) {
            action.args = me._applyArguments(action.args, module.settings || {});

            me.executeFile(action.file, action.args);
        });

        console.log('executing synchronous actions...');
        (function executeAction(index) {
            if (index < syncActions.length)
            {
                var action = syncActions[index],
                    args   = me._applyArguments(action.args, module.settings || {});

                me.executeFile(action.file, args, function() {
                    executeAction(++index);
                });
            }
        })(0);
    },

    _applyArguments: function(arguments, settings)
    {
        for(var name in settings)
        {
            arguments = arguments.map(function(argument) {
                return argument.replace(new RegExp('\{' + name + '\}', 'g'), settings[name]);
            })
        }

        return arguments;
    },

    _getActions: function(actionNames, sync)
    {
        var me = this,
            actions = [];

        actionNames.forEach(function(actionName) {
            me.config.actions.forEach(function(action) {
                if (action.name == actionName && action.sync == sync)
                {
                    actions.push(action);
                }
            });
        });

        return actions;
    },

    executeFile: function(filename, arguments, finished)
    {
        return require('child_process').execFile(filename, arguments, {}, finished || function(error, stdout, stderr) {
            if (error)
            {
                console.log(error);
                process.exit();
            }
        });
    }

});